name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🚪
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js, pnpm and dependencies 🌸
        uses: ./.github/actions/setup-pnpm

      - name: Typecheck 🔡
        run: pnpm typecheck:affected

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🚪
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js, pnpm and dependencies 🌸
        uses: ./.github/actions/setup-pnpm

      - name: Lint 🪩
        run: pnpm lint:affected

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🚪
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js, pnpm and dependencies 🌸
        uses: ./.github/actions/setup-pnpm

      - name: Prettier ✨
        run: pnpm prettier:affected

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🚪
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js, pnpm and dependencies 🌸
        uses: ./.github/actions/setup-pnpm

      - name: Build 🎁
        run: pnpm build

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout 🚪
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js, pnpm and dependencies 🌸
        uses: ./.github/actions/setup-pnpm

      - name: Migration 🚚
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/postgres'
        run: |
          cd apps/api
          pnpm prisma:migrate
          pnpm prisma:seed

      - name: Build 🎁
        run: pnpm build

      - name: Run Tests 🧪
        env:
          NEXT_PUBLIC_LENS_NETWORK: 'testnet'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/postgres'
          LENS_DATABASE_PASSWORD: ${{ secrets.LENS_DATABASE_PASSWORD }}
          CLICKHOUSE_PASSWORD: ${{ secrets.CLICKHOUSE_PASSWORD }}
          SECRET: ${{ secrets.SECRET }}
          EVER_ACCESS_KEY: ${{ secrets.EVER_ACCESS_KEY }}
          EVER_ACCESS_SECRET: ${{ secrets.EVER_ACCESS_SECRET }}
          IPAPI_KEY: ${{ secrets.IPAPI_KEY }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          STACK_SO_API_KEY: ${{ secrets.STACK_SO_API_KEY }}
        run: |
          cd apps/api
          {
            echo "NEXT_PUBLIC_LENS_NETWORK=${NEXT_PUBLIC_LENS_NETWORK}"
            echo "DATABASE_URL=${DATABASE_URL}"
            echo "LENS_DATABASE_PASSWORD=${LENS_DATABASE_PASSWORD}"
            echo "CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}"
            echo "SECRET=${SECRET}"
            echo "EVER_ACCESS_KEY=${EVER_ACCESS_KEY}"
            echo "EVER_ACCESS_SECRET=${EVER_ACCESS_SECRET}"
            echo "IPAPI_KEY=${IPAPI_KEY}"
            echo "PRIVATE_KEY=${PRIVATE_KEY}"
            echo "STACK_SO_API_KEY=${STACK_SO_API_KEY}"
          } > .env
          cd ../..
          pnpm test:e2e
